generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assessment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contact Info
  name     String
  email    String
  role     String
  company  String
  website  String?

  // Assessment Questions
  aiVisionClarity         Int
  visionFormalized        String
  aiStrategicImportance   String
  competitiveAdvantage    Int
  investmentPlans         String
  currentProjects         String
  aiAreas                 String? // JSON array as string
  pilotProjects           String
  employeeUsage           Int
  managementUsage         Int
  mainChallenges          String? // JSON array as string
  partnerships            String
  dataReadiness           String
  internalSkills          String
  trainingInitiatives     String
  decisionMakerAwareness  String
  dedicatedTeam           String
  aiPolicies              String
  aiMetrics               String

  // Custom prompt (optional)
  customPrompt            String?

  // Assessment Results
  assessmentScore         Int
  assessmentCluster       String
  assessmentDetails       String? // JSON as string
  
  // AI Generated Summary
  aiSummary               String?

  @@map("assessments")
}

// AI Lead Generation Models
model Lead {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Contact information
  fullName    String
  email       String
  company     String
  website     String?

  // Business information
  industry       String
  companySize    String // startup, sme, enterprise
  jobRole        String
  businessDescription String @db.Text

  // Lead qualification
  leadScore      Int      @default(0) // 0-100 score
  leadStatus     String   @default("new") // new, qualified, contacted, converted

  // Metadata
  source         String   @default("ai-assistant")
  utmSource      String?
  utmMedium      String?
  utmCampaign    String?

  // AI analysis results
  aiAnalysisCompleted Boolean  @default(false)
  aiUseCases         String?   @db.Text // JSON
  estimatedRoi       String?
  implementationTimeline String?

  // Relationships
  conversations Conversation[]

  @@map("leads")
}

model Conversation {
  id              String   @id @default(cuid())
  leadId          String
  createdAt       DateTime @default(now())

  // Conversation data
  sessionId       String
  messageCount    Int      @default(0)
  conversationData String  @db.Text // JSON with full conversation

  // Analysis metrics
  engagementScore Int      @default(0) // 1-10
  topicsDiscussed String[] // Array of main topics
  questionsAsked  String[] // Key questions from prospect

  // Status
  status          String    @default("active") // active, completed, abandoned
  completedAt     DateTime?

  // Relationships
  lead            Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  interactions    AIInteraction[]

  @@unique([leadId, sessionId])
  @@map("conversations")
}

model AIInteraction {
  id              String   @id @default(cuid())
  conversationId  String
  createdAt       DateTime @default(now())

  // Message data
  messageType     String   // user, assistant, system
  content         String   @db.Text

  // AI metrics
  responseTimeMs  Int?
  tokensUsed      Int?
  modelUsed       String?

  // Context
  promptVersion   String?
  useCaseGenerated Boolean @default(false)
  containsCta     Boolean @default(false)

  // Relationships
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
}

// RAG System Models for Document-based Knowledge Retrieval
model Document {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Document metadata
  filename        String
  contentType     String   @map("content_type")
  fileSize        Int      @map("file_size")
  uploadPath      String?  @map("upload_path") // Supabase Storage path
  
  // Document content
  title           String?
  content         String   @db.Text
  summary         String?  @db.Text
  
  // Processing status
  processingStatus String  @default("pending") @map("processing_status") // pending, processing, completed, failed
  chunkCount      Int      @default(0) @map("chunk_count")
  
  // Company/context association
  companyContext  String[] @map("company_context") // Array of companies this doc applies to
  documentType    String   @default("general") @map("document_type") // general, company_specific, industry, case_study, technical
  tags            String[] @default([])
  
  // Metadata
  createdBy       String?  @map("created_by") // User who uploaded
  language        String   @default("it")

  // Relationships
  chunks          DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id            String   @id @default(cuid())
  documentId    String   @map("document_id")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Chunk content
  content       String   @db.Text
  chunkIndex    Int      @map("chunk_index")
  tokenCount    Int?     @map("token_count")
  
  // Note: Vector embeddings are handled directly in Supabase with pgvector
  // The embedding field is not included in Prisma schema as it uses custom vector type
  
  // Chunk metadata
  metadata      Json     @default("{}")
  pageNumber    Int?     @map("page_number")
  sectionTitle  String?  @map("section_title")
  chunkType     String   @default("content") @map("chunk_type") // content, heading, summary, key_point
  
  // Context information
  keywords      String[] @default([])
  entities      String[] @default([]) // Extracted named entities

  // Relationships
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@map("document_chunks")
}

// AI Prompt Management
model Prompt {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Prompt identification
  promptId    String   @unique @map("prompt_id") // e.g., "aiChat", "emailResponse"
  name        String
  
  // Prompt content
  content     String   @db.Text
  version     String   @default("1.0")
  
  // Metadata
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String?  @map("created_by")
  description String?  @db.Text
  
  // Usage tracking
  usageCount  Int      @default(0) @map("usage_count")
  lastUsed    DateTime? @map("last_used")

  @@map("prompts")
}